require('dotenv').config();
const { Bot, Keyboard } = require('grammy');
const schedule = require('node-schedule');
const fetch = require('node-fetch');
const moment = require('moment-timezone');
const fs = require('fs');
const path = require('path');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
moment.locale('ru');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
const subscribersPath = path.join(process.env.DATA_DIR || __dirname, 'subscribers.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.dirname(subscribersPath);
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª subscribers.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(subscribersPath)) {
    fs.writeFileSync(subscribersPath, JSON.stringify({ subscribers: [] }, null, 2));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
function getSubscribers() {
    try {
        const data = fs.readFileSync(subscribersPath, 'utf8');
        return JSON.parse(data).subscribers;
    } catch (error) {
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
function saveSubscribers(subscribers) {
    fs.writeFileSync(subscribersPath, JSON.stringify({ subscribers }, null, 2));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!process.env.BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN');
    process.exit(1);
}

const bot = new Bot(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const subscribeKeyboard = new Keyboard()
    .text("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    .resized();

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const subscribedKeyboard = new Keyboard()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    .text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞")
    .row()
    .text("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    .resized();

async function fetchTopDrivers(endpoint) {
    try {
        const response = await fetch(`https://fleet-api-server.onrender.com/top/money/${endpoint}`);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return null;
    }
}

function formatMessage(data, isYesterday = false) {
    const now = moment().tz('Europe/Moscow');
    const date = isYesterday ? now.subtract(1, 'days') : now;
    const dateStr = date.format('D MMMM YYYY');
    const timeStr = now.format('HH:mm');

    let message = isYesterday 
        ? `*–¢–æ–ø –ö—É—Ä—å–µ—Ä–æ–≤ –∑–∞ ${dateStr}*\n*–ü–∞—Ä–∫–∏ –ù–∞—Ä–æ–¥–Ω—ã–π –∏ Luxury courier*\n\n`
        : `*–¢–æ–ø –ö—É—Ä—å–µ—Ä–æ–≤ –∑–∞ ${dateStr} [${timeStr}]*\n*–ü–∞—Ä–∫–∏ –ù–∞—Ä–æ–¥–Ω—ã–π –∏ Luxury courier*\n\n`;

    data.forEach((driver, index) => {
        const driverId = driver.phone.slice(-5);
        const hours = Number(driver.hours.replace(',', '.')) || 0;
        const money = Number(driver.money) || 0;
        const orders = Number(driver.orders) || 0;
        const hourlyRate = hours > 0 ? Math.round(money / hours) : 0;

        message += `${index + 1}. –¢79.${driverId} - ${orders} –∑ - ${hours} —á - ${money} ‚ÇΩ - ${hourlyRate} ‚ÇΩ/—á \n`;
    });

    return message;
}

async function sendStatistics() {
    const data = await fetchTopDrivers('today');
    if (data) {
        const message = formatMessage(data);
        const subscribers = getSubscribers();
        
        for (const chatId of subscribers) {
            try {
                await bot.api.sendMessage(chatId, message, { 
                    parse_mode: 'Markdown',
                    reply_markup: subscribedKeyboard
                });
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
            }
        }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤—Ä–µ–º—è –ú–°–ö)
const schedules = ['00 8 * * *', '00 12 * * *', '00 16 * * *', '00 20 * * *', '55 23 * * *'];

schedules.forEach(cronTime => {
    schedule.scheduleJob(cronTime, sendStatistics);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    const subscribers = getSubscribers();
    const chatId = ctx.chat.id;
    const isSubscribed = subscribers.includes(chatId);

    await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.',
        { 
            reply_markup: isSubscribed ? subscribedKeyboard : subscribeKeyboard 
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => {
    const data = await fetchTopDrivers('today');
    if (data) {
        const message = formatMessage(data);
        await ctx.reply(message, { 
            parse_mode: 'Markdown',
            reply_markup: subscribedKeyboard
        });
    } else {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            reply_markup: subscribedKeyboard
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞
bot.hears('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞', async (ctx) => {
    const data = await fetchTopDrivers('yesterday');
    if (data) {
        const message = formatMessage(data, true);
        await ctx.reply(message, { 
            parse_mode: 'Markdown',
            reply_markup: subscribedKeyboard
        });
    } else {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            reply_markup: subscribedKeyboard
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot.hears('‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', (ctx) => {
    const subscribers = getSubscribers();
    const chatId = ctx.chat.id;

    if (!subscribers.includes(chatId)) {
        subscribers.push(chatId);
        saveSubscribers(subscribers);
        ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üëç\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
            reply_markup: subscribedKeyboard
        });
    } else {
        ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            reply_markup: subscribedKeyboard
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø–∏—Å–∫–∏
bot.hears('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', (ctx) => {
    const subscribers = getSubscribers();
    const chatId = ctx.chat.id;
    const index = subscribers.indexOf(chatId);

    if (index !== -1) {
        subscribers.splice(index, 1);
        saveSubscribers(subscribers);
        ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            reply_markup: subscribeKeyboard
        });
    } else {
        ctx.reply('–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            reply_markup: subscribeKeyboard
        });
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...'); 